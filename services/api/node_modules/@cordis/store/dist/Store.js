"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Store = exports.CordisStoreTypeError = void 0;
const tslib_1 = require("tslib");
const error_1 = (0, tslib_1.__importDefault)(require("@cordis/error"));
exports.CordisStoreTypeError = (0, error_1.default)(TypeError, {
    noReduceEmptyStore: 'Cannot reduce an empty store without an initial value'
});
class Store extends Map {
    constructor(options) {
        super(options?.entries);
        this.maxSize = options?.maxSize ?? null;
        this.emptyEvery = options?.emptyEvery ?? null;
        this.emptyCb = options?.emptyCb ?? null;
        if (this.emptyEvery) {
            this.emptyTimer = setInterval(() => this.emptyCb ? this.empty(this.emptyCb) : this.clear(), this.emptyEvery);
        }
        else {
            this.emptyTimer = null;
        }
    }
    get(key) {
        return super.get(key);
    }
    set(key, value) {
        if (this.maxSize && this.size >= this.maxSize) {
            this.clear();
        }
        return super.set(key, value);
    }
    delete(key) {
        return super.delete(key);
    }
    findKey(cb) {
        for (const [key, value] of this) {
            if (cb(value, key)) {
                return key;
            }
        }
    }
    find(cb) {
        for (const [key, value] of this) {
            if (cb(value, key)) {
                return value;
            }
        }
    }
    filter(cb) {
        return new Store({
            entries: [...this.entries()].filter(a => cb(a[1], a[0]))
        });
    }
    sort(cb = (x, y) => Number(x > y)) {
        return new Store({
            entries: [...this.entries()].sort((a, b) => cb(a[1], b[1], a[0], b[0]))
        });
    }
    mSort(cb = (x, y) => Number(x > y)) {
        const sorted = this.sort(cb);
        this.clear();
        for (const [key, value] of sorted) {
            this.set(key, value);
        }
        return this;
    }
    map(cb) {
        const entries = this.entries();
        return Array.from({ length: this.size }, () => {
            const { value: [key, value] } = entries.next();
            return cb(value, key);
        });
    }
    empty(cb) {
        if (!cb) {
            const size = this.size;
            this.clear();
            return size;
        }
        let deletes = 0;
        for (const [key, value] of this) {
            if (cb(value, key)) {
                this.delete(key);
                deletes++;
            }
        }
        return deletes;
    }
    reduce(cb, initial) {
        let accum;
        if (initial != null) {
            accum = initial;
            for (const [key, value] of this) {
                accum = cb(accum, value, key);
            }
            return accum;
        }
        let first = true;
        for (const [key, value] of this) {
            if (first) {
                accum = value;
                first = false;
                continue;
            }
            accum = cb(accum, value, key);
        }
        if (first) {
            throw new exports.CordisStoreTypeError('noReduceEmptyStore');
        }
        return accum;
    }
}
exports.Store = Store;
//# sourceMappingURL=Store.js.map