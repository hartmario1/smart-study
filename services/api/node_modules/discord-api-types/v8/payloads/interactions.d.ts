import type { Permissions, Snowflake } from '../../common/index';
import type { APIGuildMember, APIUser, MessageFlags } from './index';
import type { RESTPostAPIWebhookWithTokenJSONBody } from '../rest/index';
/**
 * https://discord.com/developers/docs/interactions/slash-commands#applicationcommand
 */
export interface APIApplicationCommand {
    id: Snowflake;
    application_id: Snowflake;
    name: string;
    description: string;
    options?: APIApplicationCommandOption[];
}
interface APIApplicationCommandOptionBase {
    type: ApplicationCommandOptionType.BOOLEAN | ApplicationCommandOptionType.USER | ApplicationCommandOptionType.CHANNEL | ApplicationCommandOptionType.ROLE;
    name: string;
    description: string;
    default?: boolean;
    required?: boolean;
}
/**
 * https://discord.com/developers/docs/interactions/slash-commands#applicationcommandoption
 */
export declare type APIApplicationCommandOption = APIApplicationCommandArgumentOptions | APIApplicationCommandSubCommandOptions | APIApplicationCommandOptionBase;
/**
 * This type is exported as a way to make it stricter for you when you're writing your commands
 *
 * If the option is a `SUB_COMMAND` or `SUB_COMMAND_GROUP` type, this nested options will be the parameters
 */
export interface APIApplicationCommandSubCommandOptions extends Omit<APIApplicationCommandOptionBase, 'type'> {
    type: ApplicationCommandOptionType.SUB_COMMAND | ApplicationCommandOptionType.SUB_COMMAND_GROUP;
    options?: APIApplicationCommandOption[];
}
/**
 * This type is exported as a way to make it stricter for you when you're writing your commands
 *
 * In contrast to @see APIApplicationCommandSubCommandOptions, these types cannot have an `options` array,
 * but they can have a `choices` one
 */
export interface APIApplicationCommandArgumentOptions extends Omit<APIApplicationCommandOptionBase, 'type'> {
    type: ApplicationCommandOptionType.STRING | ApplicationCommandOptionType.INTEGER;
    choices?: APIApplicationCommandOptionChoice[];
}
/**
 * https://discord.com/developers/docs/interactions/slash-commands#applicationcommandoptiontype
 */
export declare const enum ApplicationCommandOptionType {
    SUB_COMMAND = 1,
    SUB_COMMAND_GROUP = 2,
    STRING = 3,
    INTEGER = 4,
    BOOLEAN = 5,
    USER = 6,
    CHANNEL = 7,
    ROLE = 8
}
/**
 * https://discord.com/developers/docs/interactions/slash-commands#applicationcommandoptionchoice
 */
export interface APIApplicationCommandOptionChoice {
    name: string;
    value: string | number;
}
/**
 * https://discord.com/developers/docs/interactions/slash-commands#interaction
 */
export interface APIInteraction {
    id: Snowflake;
    type: InteractionType;
    data?: APIApplicationCommandInteractionData;
    guild_id: Snowflake;
    channel_id: Snowflake;
    member: APIGuildMember & {
        permissions: Permissions;
        user: APIUser;
    };
    token: string;
    version: 1;
}
/**
 * Like See APIInteraction, only with the `data` property always present
 */
export declare type APIApplicationCommandInteraction = Required<APIInteraction>;
/**
 * https://discord.com/developers/docs/interactions/slash-commands#interaction-interactiontype
 */
export declare const enum InteractionType {
    Ping = 1,
    ApplicationCommand = 2
}
/**
 * https://discord.com/developers/docs/interactions/slash-commands#interaction-applicationcommandinteractiondata
 */
export interface APIApplicationCommandInteractionData {
    id: Snowflake;
    name: string;
    options?: APIApplicationCommandInteractionDataOption[];
}
/**
 * https://discord.com/developers/docs/interactions/slash-commands#interaction-applicationcommandinteractiondataoption
 */
export interface APIApplicationCommandInteractionDataOption {
    name: string;
    /**
     * The value returned here depends on the `ApplicationCommandOptionType` type of the option with the name
     * that matches this interface's `name`.
     *
     * You will need to manually cast this to the appropriate type based on the returned data
     */
    value?: unknown;
    options?: APIApplicationCommandInteractionDataOption[];
}
/**
 * https://discord.com/developers/docs/interactions/slash-commands#interaction-interaction-response
 */
export declare type APIInteractionResponse = APIInteractionResponsePong | APIInteractionResponseAcknowledge | APIInteractionResponseAcknowledgeWithSource | APIInteractionResponseChannelMessage | APIInteractionResponseChannelMessageWithSource;
export declare type APIInteractionResponsePong = InteractionResponsePayload<APIInteractionResponseType.Pong>;
export declare type APIInteractionResponseAcknowledge = InteractionResponsePayload<APIInteractionResponseType.Acknowledge>;
export declare type APIInteractionResponseAcknowledgeWithSource = InteractionResponsePayload<APIInteractionResponseType.AcknowledgeWithSource>;
export declare type APIInteractionResponseChannelMessage = InteractionResponsePayload<APIInteractionResponseType.ChannelMessage, true>;
export declare type APIInteractionResponseChannelMessageWithSource = InteractionResponsePayload<APIInteractionResponseType.ChannelMessageWithSource, true>;
/**
 * https://discord.com/developers/docs/interactions/slash-commands#interaction-interactionresponsetype
 */
export declare const enum APIInteractionResponseType {
    Pong = 1,
    Acknowledge = 2,
    ChannelMessage = 3,
    ChannelMessageWithSource = 4,
    AcknowledgeWithSource = 5
}
/**
 * https://discord.com/developers/docs/interactions/slash-commands#interaction-interactionapplicationcommandcallbackdata
 */
export declare type APIInteractionApplicationCommandCallbackData = Omit<RESTPostAPIWebhookWithTokenJSONBody, 'username' | 'avatar_url'> & {
    flags?: MessageFlags;
};
/**
 * @internal
 */
interface InteractionResponsePayload<T extends APIInteractionResponseType, D = false> {
    type: T;
    data?: D extends true ? APIInteractionApplicationCommandCallbackData : never;
}
export {};
//# sourceMappingURL=interactions.d.ts.map