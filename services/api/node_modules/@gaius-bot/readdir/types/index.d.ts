/// <reference types="node" />
import { Readable } from 'stream';
export declare enum ReadMode {
    file = 0,
    dir = 1,
    both = 2
}
export interface StreamOptions {
    fileExtension?: string;
    readMode?: ReadMode | keyof typeof ReadMode;
    highWaterMark?: number;
}
export interface Node {
    files?: string[];
    depth: number;
    path: string;
}
export declare class RecursiveDirReadStream extends Readable {
    readonly root: string;
    static readonly expectedErrors: Set<string>;
    private readonly fileExtension;
    private readonly readMode;
    private readonly _nodes;
    private _current?;
    private _reading;
    constructor(root: string, options?: StreamOptions);
    private _onError;
    private _explore;
    _read(batch: number): Promise<void>;
    [Symbol.asyncIterator](): AsyncIterableIterator<string>;
}
export declare const readdirRecurse: (root: string, options?: StreamOptions | undefined) => RecursiveDirReadStream;
export declare const readdirRecursePromise: (root: string, options?: StreamOptions | undefined) => Promise<string[]>;
//# sourceMappingURL=index.d.ts.map